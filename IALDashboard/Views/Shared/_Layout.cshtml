@{
    var controllerName = HttpContext.Current.Request.RequestContext.RouteData.Values["controller"].ToString();

    controllerName = System.Text.RegularExpressions.Regex.Replace(controllerName, "[A-Z]", " $0");

    var actionName = HttpContext.Current.Request.RequestContext.RouteData.Values["action"].ToString();

    actionName = System.Text.RegularExpressions.Regex.Replace(actionName, "[A-Z]", " $0");


    if ((ViewBag.actionName) != null)
    {
        actionName = ViewBag.actionName;
    }
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - IFAD Autos Ltd</title>
    <!-- Google Font: Source Sans Pro -->
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:300,400,400i,700&display=fallback">

    @Styles.Render("~/Content/css")
    @Styles.Render("~/Content/dtcss")
    @Scripts.Render("~/bundles/modernizr")
   
</head>
<body class="hold-transition sidebar-mini">
    <div class="wrapper">
        <!---  After wrapper in layout -->
        <!-- Preloader -->
        <div class="preloader flex-column justify-content-center align-items-center">
            <img class="animation__shake" src="~/Content/images/ifad-wave.png" alt="IFAD" height="60" width="60">
        </div>

        @Html.Partial("_Navbar")
        @Html.Partial("_Aside")

        <!-- Content Wrapper. Contains page content -->
        <div class="content-wrapper">

            <!-- Content Header (Page header) -->
            <section class="content-header">
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-sm-6">
                            <h1>@actionName</h1>
                        </div>
                        @*<div class="col-sm-6">
                            <ol class="breadcrumb float-sm-right">
                                <li class="breadcrumb-item"><a href="#">@controllerName</a></li>
                                <li class="breadcrumb-item active">@actionName</li>
                            </ol>
                        </div>*@
                    </div>
                </div><!-- /.container-fluid -->
            </section>

            <!-- Main content -->
            <section class="content">
                @RenderBody()
            </section>
            <!-- /.content -->
        </div>
        <!-- /.content-wrapper -->
        @Html.Partial("_Footer")

    </div>


    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    @Scripts.Render("~/bundles/datatable")
    @RenderSection("scripts", required: false)

    <!-- Page specific script -->
    <script type="text/javascript">
        function hidePreloader() {

            $(".preloader").css('height', 0);

            $(".preloader img").css('height', 0);
        }

        var tableToExcel = (function () {
            var uri = 'data:application/vnd.ms-excel;base64,'
                , template = '<html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40"><head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet><x:Name>{worksheet}</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]--></head><body><table>{table}</table></body></html>'
                , base64 = function (s) { return window.btoa(unescape(encodeURIComponent(s))) }
                , format = function (s, c) { return s.replace(/{(\w+)}/g, function (m, p) { return c[p]; }) }
            return function (table, name) {
                if (!table.nodeType) table = document.getElementsByClassName(table)
                var ctx = { worksheet: name || 'Worksheet', table: table.innerHTML }
                window.location.href = uri + base64(format(template, ctx))
            }
        })()

        //paging: false,
           // ordering: false,
               // info: false,



    </script>

    <script>

        $(document).ready(function () {
            $('#example').DataTable({
                fixedHeader: true,
                responsive: true,
                paging: false,
                ordering: false,
                info: false,
            });

            $("body").on("click", ".myPreLoader", function () {

                $('.preloader').removeAttr("style");
                $('.preloader img').removeAttr("style");

            })
        });

        $(document).ready(function () {
            $('.dailyStockReport').DataTable({
                dom: 'Bfrtip',
                buttons: [
                    {
                        extend: 'excel',
                        customize: function (xlsx) {
                            //Apply styles, Center alignment of text and making it bold.
                            var sSh = xlsx.xl['styles.xml'];
                            var lastXfIndex = $('cellXfs xf', sSh).length - 1;

                            var n1 = '<numFmt formatCode="##0.0000%" numFmtId="300"/>';
                            var s2 = '<xf numFmtId="0" fontId="2" fillId="0" borderId="0" applyFont="1" applyFill="0" applyBorder="0" xfId="0" applyAlignment="1">' +
                                '<alignment horizontal="center"/></xf>';

                            sSh.childNodes[0].childNodes[0].innerHTML += n1;
                            sSh.childNodes[0].childNodes[5].innerHTML += s2;

                            var greyBoldCentered = lastXfIndex + 1;

                            //Merge cells as per the table's colspan
                            var sheet = xlsx.xl.worksheets['sheet1.xml'];
                            var dt = $('#tblReport').DataTable();
                            var frColSpan = $(dt.table().header()).find('th:nth-child(1)').prop('colspan');
                            var srColSpan = $(dt.table().header()).find('th:nth-child(2)').prop('colspan');
                            var columnToStart = 2;

                            var mergeCells = $('mergeCells', sheet);
                            mergeCells[0].appendChild(_createNode(sheet, 'mergeCell', {
                                attr: {
                                    ref: 'A1:' + toColumnName(frColSpan) + '1'
                                }
                            }));

                            mergeCells.attr('count', mergeCells.attr('count') + 1);

                            var columnToStart = 2;

                            while (columnToStart <= frColSpan) {
                                mergeCells[0].appendChild(_createNode(sheet, 'mergeCell', {
                                    attr: {
                                        ref: toColumnName(columnToStart) + '2:' + toColumnName((columnToStart - 1) + srColSpan) + '2'
                                    }
                                }));
                                columnToStart = columnToStart + srColSpan;
                                mergeCells.attr('count', mergeCells.attr('count') + 1);
                            }

                            //Text alignment to center and apply bold
                            $('row:nth-child(1) c:nth-child(1)', sheet).attr('s', greyBoldCentered);
                            for (i = 0; i < frColSpan; i++) {
                                $('row:nth-child(2) c:nth-child(' + i + ')', sheet).attr('s', greyBoldCentered);
                            }

                            function _createNode(doc, nodeName, opts) {
                                var tempNode = doc.createElement(nodeName);
                                if (opts) {
                                    if (opts.attr) {
                                        $(tempNode).attr(opts.attr);
                                    }
                                    if (opts.children) {
                                        $.each(opts.children, function (key, value) {
                                            tempNode.appendChild(value);
                                        });
                                    }
                                    if (opts.text !== null && opts.text !== undefined) {
                                        tempNode.appendChild(doc.createTextNode(opts.text));
                                    }
                                }
                                return tempNode;
                            }

                            //Function to fetch the cell name
                            function toColumnName(num) {
                                for (var ret = '', a = 1, b = 26; (num -= a) >= 0; a = b, b *= 26) {
                                    ret = String.fromCharCode(parseInt((num % b) / a) + 65) + ret;
                                }
                                return ret;
                            }
                        }
                    } ],
                scrollY: 600,
                scrollX: true,
                scrollCollapse: true,
                paging: false,
                fixedColumns: {
                    left: 4
                },
                fixedHeader: {
                    header: true,
                },
               
            });
        });

        $(document).ready(function () {
            $('#dailyStockReport1').DataTable({
                dom: 'Bfrtip',
                buttons: [
                    'copy', 'csv', 'excel', 'pdf', 'print'
                ]
            });
        });

        $(document).ready(function () {
            //Initialize Select2 Elements
            $('.select2').select2()

            $("body").on("click", "#profile_pic", function () {
                $("#ProfilePic").modal("show");
            });
        });


        function preview() {
            frame.src = URL.createObjectURL(event.target.files[0]);
        }
        function clearImage() {
            document.getElementById('formFile').value = null;
            frame.src = "";
        }

        


    </script>

</body>
</html>
